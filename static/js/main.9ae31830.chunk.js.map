{"version":3,"sources":["Files/Images/Spinner42px.svg","components/Home/Home.jsx","components/Redux/Selectors.js","components/Redux/AuthReducer.js","components/Header/Header.jsx","components/Profile/Profile.jsx","components/Preloader/Preloader.jsx","components/Posts/Posts.jsx","API/API.js","components/Redux/PostsReducer.js","components/Posts/PostsContainer.jsx","components/Login/LoginForm.jsx","components/Login/LoginContainer.jsx","App.js","serviceWorker.js","index.js","components/Login/Login.module.css","components/Header/Header.module.css","components/Posts/Posts.module.css","components/Home/Home.module.css","components/Preloader/Preloader.module.css"],"names":["module","exports","Home","className","css","somePage","getCurrentPage","state","postsStore","currentPage","getPosts","posts","getLoading","requestReturn","getIsAuth","authStore","isAuth","isAuthAction","type","saveState","localStorage","setItem","JSON","stringify","logOutThunk","dispatch","initialState","email","password","AuthReducer","action","Header","pagesList","id","pageName","pathToPage","this","map","item","key","to","pageLink","props","onClick","logOut","React","Component","connect","Profile","Preloader","PreloaderContainer","src","PreloaderSVG","alt","Posts","Post","userId","postTitle","title","postBody","body","instance","axios","create","baseURL","withCredentials","PostAPI","pageNumber","get","then","response","data","INCREMENT","END","incrementAction","requestReturnAction","end","PostsReducer","firstPosts","nextPosts","length","PostsContainer","scrollFunction","window","innerHeight","pageYOffset","document","offsetHeight","getNextPartOfPostThunk","getFirstPartOfPostThunk","addEventListener","setStartCurrentPage","removeEventListener","getState","LoginForm","Login","onSubmit","handleSubmit","Field","component","name","placeholder","input","error","formError","button","reduxForm","form","LoginContainer","formData","console","log","logInThunk","Email","Password","logInAction","stopSubmit","_error","App","authorizationCheckThunk","exact","path","render","stateAsString","getItem","parse","Boolean","location","hostname","match","CombineReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAOC,QAAU,IAA0B,yC,0OCS5BC,EANF,WACT,OAAO,yBAAKC,UAAWC,IAAIC,UACvB,4C,gCCLKC,EAAiB,SAAAC,GAC1B,OAAOA,EAAMC,WAAWC,aAEfC,EAAW,SAAAH,GACpB,OAAOA,EAAMC,WAAWG,OAEfC,EAAa,SAAAL,GACtB,OAAOA,EAAMC,WAAWK,eAEfC,EAAY,SAAAP,GACrB,OAAOA,EAAMQ,UAAUC,Q,ykBCP3B,IAKaC,EAAe,SAAAD,GAAM,MAAK,CAACE,KAJxB,UAIuCF,WAC1CG,EAAY,SAACH,GAAD,OAAYI,aAAaC,QAAQ,aAAcC,KAAKC,UAAUP,KAY1EQ,EAAc,kBAAM,SAAAC,GAC7BA,EAASR,GAAa,IACtBE,GAAU,KAUVO,EAAe,CACfC,MAAO,KACPC,SAAU,KACVZ,QAAQ,GAsBGa,EAlBK,WAAmC,IAAlCtB,EAAiC,uDAAzBmB,EAAcI,EAAW,uCAClD,OAAQA,EAAOZ,MACX,IAvCM,QAwCF,OAAO,EAAP,GACOX,EADP,CAEIoB,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,WAEzB,IA5CQ,UA6CJ,OAAO,EAAP,GACOrB,EADP,CAEIS,OAAQc,EAAOd,SAEvB,QACI,OAAOT,IC/CbwB,E,2MACFxB,MAAQ,CACJyB,UAAW,CACP,CAACC,GAAI,EAAGC,SAAU,6CAAWC,WAAY,KACzC,CAACF,GAAI,EAAGC,SAAU,6CAAWC,WAAY,UACzC,CAACF,GAAI,EAAGC,SAAU,6CAAWC,WAAY,c,wEAK7C,IAAIH,EAAYI,KAAK7B,MAAMyB,UAAUK,KAAI,SAAAC,GAAI,OACzC,kBAAC,IAAD,CAASC,IAAKD,EAAKL,GAAIO,GAAE,UAAKF,EAAKH,YAAchC,UAAWC,IAAIqC,UAC3DH,EAAKJ,aAId,OACI,yBAAK/B,UAAWC,IAAI2B,QAChB,yBAAK5B,UAAWC,IAAI4B,WACfA,GAEJI,KAAKM,MAAM1B,OACN,kBAAC,IAAD,CAASwB,GAAE,SAAYG,QAASP,KAAKM,MAAMlB,YAAarB,UAAWC,IAAIwC,QAAvE,WACA,U,GAvBDC,IAAMC,WA8BZC,eADO,SAAAxC,GAAK,MAAK,CAACS,OAAQF,EAAUP,MACX,CAACiB,eAA1BuB,CAAwChB,G,QC/BjDiB,E,iLAEE,OAAQZ,KAAKM,MAAM1B,OACb,yBAAKb,UAAWC,IAAIC,UAAU,8CAC9B,kBAAC,IAAD,CAAUmC,GAAE,e,GAJJK,IAAMC,WASbC,eADO,SAAAxC,GAAK,MAAK,CAACS,OAAQF,EAAUP,MACX,GAAzBwC,CAA6BC,G,oDCH7BC,EARG,WACd,OACI,yBAAK9C,UAAWC,IAAI8C,oBAChB,yBAAK/C,UAAWC,IAAI6C,UAAWE,IAAKC,IAAcC,IAAI,OCgBnDC,EAnBD,SAAAZ,GACV,IAAI/B,EAAQ+B,EAAM/B,MAAM0B,KAAI,SAAAC,GACxB,OACI,yBAAKnC,UAAWC,IAAImD,KAAMhB,IAAKD,EAAKL,IAChC,+CAAiBK,EAAKkB,SACtB,2CAAalB,EAAKL,KAClB,yBAAK9B,UAAWC,IAAIqD,WAApB,iBAA0CnB,EAAKoB,QAC/C,yBAAKvD,UAAWC,IAAIuD,UAApB,gBAAwCrB,EAAKsB,WAIzD,OACI,yBAAKzD,UAAWC,IAAIkD,OACf3C,EACA+B,EAAM7B,cAAgB,KAAO,6BAAK,kBAAC,EAAD,S,iBChBzCgD,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,wCACRC,iBAAiB,IAGRC,EACM,SAACC,GAAD,OAAgBN,EAASO,IAAT,sBAA4BD,IAAcE,MAAK,SAAAC,GAC1E,OAAOA,EAASC,S,yjBCPxB,IAEMC,EAAS,sBAETC,EAAG,gBAKHC,EAAkB,iBAAO,CAACxD,KAAMsD,IAChCG,GAAsB,SAAC9D,GAAD,MAAoB,CAACK,KAP7B,2BAOmDL,kBA4BnEa,GAAe,CACff,MAAO,GACPF,YAAa,EACbI,eAAe,EACf+D,KAAK,GAmCMC,GAhCM,WAAmC,IAAlCtE,EAAiC,uDAAzBmB,GAAcI,EAAW,uCACnD,OAAQA,EAAOZ,MACX,IA/Ca,4BAgDT,OAAO,KACAX,EADP,CAEII,MAAOmB,EAAOgD,aAEtB,IAnDY,2BAoDR,OAAO,KACAvE,EADP,CAEII,MAAM,GAAD,mBAAMJ,EAAMI,MAAM0B,KAAI,SAAAC,GAAI,YAASA,OAAnC,YAA+CR,EAAOiD,YAC3DH,KAAM9C,EAAOiD,UAAUC,SAE/B,IArDoB,mBAsDhB,OAAO,KACAzE,EADP,CAEIE,YAAa,IAErB,KAAK+D,EACD,OAAO,KACAjE,EADP,CAEIE,YAAaF,EAAME,YAAc,IAEzC,IAjEY,2BAkER,OAAO,KAAIF,EAAX,CAAkBM,cAAeiB,EAAOjB,gBAC5C,KAAK4D,EACD,OAAO,KAAIlE,EAAX,CAAkBqE,IAAK9C,EAAO8C,MAClC,QACI,OAAOrE,ICrEb0E,G,2MAWFC,eAAiB,WACRC,OAAOC,YAAcD,OAAOE,aAAgBC,SAAS1B,KAAK2B,cAC3D,EAAK7C,MAAM8C,uBAAuB,EAAK9C,MAAMjC,c,mFAXjD2B,KAAKM,MAAM+C,wBAAwBrD,KAAKM,MAAMjC,aAC9C0E,OAAOO,iBAAiB,SAAUtD,KAAK8C,kB,6CAIvC9C,KAAKM,MAAMiD,sBACXR,OAAOS,oBAAoB,SAAUxD,KAAK8C,kB,+BAU1C,OAAO,kBAAC,EAAU9C,KAAKM,W,GAlBFG,IAAMC,WA4BpBC,gBANO,SAAAxC,GAAK,MAAK,CAC5BE,YAAaH,EAAeC,GAC5BI,MAAOD,EAASH,GAChBM,cAAeD,EAAWL,GAC1BS,OAAQF,EAAUP,MAEkB,CACpCkF,wBDnBmC,SAAAtB,GAAU,OAAI,SAAA1C,GACjDA,EAASkD,IAAoB,IAC7BT,EAAsBC,GAAYE,MAAK,SAAAE,GACnC9C,EAASkD,IAAoB,IAC7BlD,EAXwC,CAACP,KAP5B,4BAOmD4D,WAW9BP,IAClC9C,EAASiD,UCebc,uBDXkC,SAAArB,GAAU,OAAI,SAAC1C,EAAUoE,GACtDA,IAAWrF,WAAWoE,IAUvBnD,EAvBoB,CAACP,KAAMuD,EAAKG,KAuBb,IATfiB,IAAWrF,WAAWK,gBACtBY,EAASkD,IAAoB,IAC7BT,EAAsBC,GAAYE,MAAK,SAAAE,GACnC9C,EAASkD,IAAoB,IAC7BlD,EAASiD,KACTjD,EAtB8B,CAACP,KAP3B,2BAOiD6D,UAsBpBR,UCK7CoB,oBDvB+B,iBAAO,CAACzE,KAPf,sBC2Bb6B,CAIZkC,I,wCCjCGa,G,iLAEE,OACI,0BAAM3F,UAAWC,KAAI2F,MAAOC,SAAU5D,KAAKM,MAAMuD,cAC7C,6BACI,6BACI,kBAACC,GAAA,EAAD,CAAOC,UAAS,QACTC,KAAI,QACJC,YAAW,QACXlG,UAAWC,KAAIkG,SAE1B,6BACI,kBAACJ,GAAA,EAAD,CAAOC,UAAS,QACTC,KAAI,WACJC,YAAW,WACXnF,KAAM,WACNf,UAAWC,KAAIkG,SAEzBlE,KAAKM,MAAM6D,OAAS,yBAAKpG,UAAWC,KAAIoG,WAAYpE,KAAKM,MAAM6D,OAChE,6BACI,4BAAQpG,UAAWC,KAAIqG,QAAvB,iB,GApBA5D,IAAMC,WA4Bf4D,gBAAU,CAACC,KAAM,SAAjBD,CAA2B3D,YAAQ,KAAM,GAAdA,CAAkB+C,KC1BtDc,G,iLACQ,IAAD,OAKL,OACI,6BACKxE,KAAKM,MAAM1B,OACN,kBAAC,IAAD,CAAUwB,GAAE,aACZ,kBAAC,GAAD,CAAkBwD,SARjB,SAAAa,GACXC,QAAQC,IAAIF,GACZ,EAAKnE,MAAMsE,WAAWH,EAASI,MAAOJ,EAASK,kB,GAJ9BrE,IAAMC,WAiBpBC,gBADS,SAAAxC,GAAK,MAAK,CAACS,OAAQF,EAAUP,MACb,CAACyG,WTZf,SAACrF,EAAOC,GAAR,OAAqB,SAAAH,GAC7B,UAAVE,GAAkC,WAAbC,GACrBH,EAPmB,SAACE,EAAOC,GAAR,MAAsB,CAACV,KAJpC,QAIiDS,QAAOC,YAOrDuF,CAAYxF,EAAOC,IAC5BH,EAASR,GAAa,IACtBE,GAAU,IAEVM,EAAS2F,YAAW,QAAS,CAACC,OAAO,kPSMQpG,eAAcO,eAApDuB,CAAkE6D,ICb3EU,G,4LAEElF,KAAKM,MAAM6E,4B,+BAIX,OACI,yBAAKpH,UAAU,OACX,kBAAC,EAAD,MACA,6BACI,kBAAC,IAAD,CAAOqH,OAAK,EAACC,KAAI,IAAOC,OAAQ,kBAAM,kBAAC,EAAD,SACtC,kBAAC,IAAD,CAAOD,KAAI,SAAYC,OAAQ,kBAAM,kBAAC,GAAD,SACrC,kBAAC,IAAD,CAAOD,KAAI,WAAcC,OAAQ,kBAAM,kBAAC,EAAD,SACvC,kBAAC,IAAD,CAAOD,KAAI,SAAYC,OAAQ,kBAAM,kBAAC,GAAD,e,GAbvC7E,IAAMC,WAoBTC,eAAQ,KAAM,CAACwE,wBVNS,kBAAM,SAAA9F,GACzC,IAAIkG,EAAgBvG,aAAawG,QAAQ,cACnB,OAAlBD,GACAlG,EAASR,EAAaK,KAAKuG,MAAMF,QUG1B5E,CAAyCuE,ICnBpCQ,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2D,gCCLAC,GAAiBC,aAAgB,CACnCpH,UAAWc,EACXrB,WAAYqE,GACZ8B,KAAMyB,OAEJC,GAAQC,aAAYJ,GAAgBK,aAAgBC,OAE1DC,IAASf,OACL,kBAAC,IAAD,CAAUW,MAAOA,IACb,kBAAC,IAAD,KACI,kBAAC,GAAD,QAEK/C,SAASoD,eAAe,SDwGnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,MAAK,SAAAyE,GACjCA,EAAaC,iB,mBElInB/I,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,MAAQ,qBAAqB,OAAS,wB,mBCA1HD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,0BAA0B,SAAW,yBAAyB,OAAS,yB,mBCArID,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,UAAY,2B,mBCAtFD,EAAOC,QAAU,CAAC,SAAW,yB,mBCA7BD,EAAOC,QAAU,CAAC,mBAAqB,sCAAsC,UAAY,gC","file":"static/js/main.9ae31830.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner42px.a1652bca.svg\";","import React from 'react';\nimport css from './Home.module.css';\n\nconst Home = () => {\n    return <div className={css.somePage}>\n        <div>Home Page</div>\n    </div>\n};\n\nexport default Home;","export const getCurrentPage = state => {\n    return state.postsStore.currentPage;\n};\nexport const getPosts = state => {\n    return state.postsStore.posts;\n};\nexport const getLoading = state => {\n    return state.postsStore.requestReturn;\n};\nexport const getIsAuth = state => {\n    return state.authStore.isAuth;\n};","import {stopSubmit} from \"redux-form\";\n\n\nconst LOGIN = 'LOGIN';\nconst IS_AUTH = 'IS_AUTH';\n\n\nexport const logInAction = (email, password) => ({type: LOGIN, email, password});\nexport const isAuthAction = isAuth => ({type: IS_AUTH, isAuth});\nexport const saveState = (isAuth) => localStorage.setItem(\"localState\", JSON.stringify(isAuth));\n\n\nexport const logInThunk = (email, password) => dispatch => {\n    if (email === \"Admin\" && password === \"123123\") {\n        dispatch(logInAction(email, password));\n        dispatch(isAuthAction(true));\n        saveState(true);\n    } else {\n        dispatch(stopSubmit(\"login\", {_error: `Имя пользователя или пароль введены не верно`}))\n    }\n};\nexport const logOutThunk = () => dispatch => {\n    dispatch(isAuthAction(false));\n    saveState(false);\n};\nexport const authorizationCheckThunk = () => dispatch => {\n    let stateAsString = localStorage.getItem(\"localState\");\n    if (stateAsString !== null) { // если не было ни одного сохранения, то будет null.\n        dispatch(isAuthAction(JSON.parse(stateAsString)));\n    }\n};\n\n\nlet initialState = {\n    email: null,\n    password: null,\n    isAuth: false,\n};\n\n\nconst AuthReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                ...state,\n                email: action.email,\n                password: action.password,\n            };\n        case IS_AUTH:\n            return {\n                ...state,\n                isAuth: action.isAuth\n            };\n        default: {\n            return state;\n        }\n    }\n};\nexport default AuthReducer;","import React from 'react';\nimport css from './Header.module.css';\nimport {NavLink} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuth} from \"../Redux/Selectors\";\nimport {logOutThunk} from \"../Redux/AuthReducer\";\n\nclass Header extends React.Component {\n    state = {\n        pagesList: [\n            {id: 1, pageName: 'Главная', pathToPage: '/',},\n            {id: 2, pageName: 'Новости', pathToPage: '/posts',},\n            {id: 3, pageName: 'Профиль', pathToPage: '/profile',},\n        ]\n    };\n\n    render() {\n        let pagesList = this.state.pagesList.map(item =>\n            <NavLink key={item.id} to={`${item.pathToPage}`} className={css.pageLink}>\n                {item.pageName}\n            </NavLink>\n        );\n\n        return (\n            <div className={css.Header}>\n                <div className={css.pagesList}>\n                    {pagesList}\n                </div>\n                {this.props.isAuth\n                    ? <NavLink to={`/login`} onClick={this.props.logOutThunk} className={css.logOut}>Log out</NavLink>\n                    : null}\n            </div>\n        );\n    }\n}\n\nlet mapStateToProps = state => ({isAuth: getIsAuth(state)});\nexport default connect(mapStateToProps, {logOutThunk})(Header);","import React from 'react';\nimport css from './../Home/Home.module.css';\nimport {getIsAuth} from \"../Redux/Selectors\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\nclass Profile extends React.Component {\n    render() {\n        return (this.props.isAuth\n            ? <div className={css.somePage}><div>Profile Page</div></div>\n            : <Redirect to={`/login`}/>);\n    };\n}\n\nlet mapStateToProps = state => ({isAuth: getIsAuth(state)});\nexport default connect(mapStateToProps, {})(Profile);","import React from 'react';\nimport css from './Preloader.module.css';\nimport PreloaderSVG from '../../Files/Images/Spinner42px.svg';\n\nconst Preloader = () => {\n    return (\n        <div className={css.PreloaderContainer}>\n            <img className={css.Preloader} src={PreloaderSVG} alt=\"\"/>\n        </div>\n    )\n};\n\nexport default Preloader;","import React from 'react';\nimport css from './Posts.module.css';\nimport Preloader from \"../Preloader/Preloader\";\n\nconst Posts = props => {\n    let posts = props.posts.map(item => {\n        return (\n            <div className={css.Post} key={item.id}>\n                <div>{`userId: ${item.userId}`}</div>\n                <div>{`id: ${item.id}`}</div>\n                <div className={css.postTitle}>{`Title: ${item.title}`}</div>\n                <div className={css.postBody}>{`Body: ${item.body}`}</div>\n            </div>\n        )\n    });\n    return (\n        <div className={css.Posts}>\n            {posts}\n            {props.requestReturn ? null : <div><Preloader/></div>}\n        </div>\n    );\n};\n\nexport default Posts;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: `https://jsonplaceholder.typicode.com/`,\n    withCredentials: true,\n});\n\nexport const PostAPI = {\n    getPartOfPost: (pageNumber) => instance.get(`posts?_page=${pageNumber}`).then(response => {\n        return response.data\n    }),\n};","import {PostAPI} from \"../../API/API\";\n\nconst GET_FIRST_POSTS = `APP/POSTS/GET_FIRST_POSTS`;\nconst GET_NEXT_POSTS = `APP/POSTS/GET_NEXT_POSTS`;\nconst INCREMENT = `APP/POSTS/INCREMENT`;\nconst REQUEST_RETURN = `APP/POSTS/REQUEST_RETURN`;\nconst END = `APP/POSTS/END`;\nconst SET_START_CURRENT_PAGE = `SET_CURRENT_PAGE`;\n\nconst getFirstPartOfPostAction = firstPosts => ({type: GET_FIRST_POSTS, firstPosts});\nconst getNextPartOfPostAction = nextPosts => ({type: GET_NEXT_POSTS, nextPosts});\nconst incrementAction = () => ({type: INCREMENT});\nconst requestReturnAction = (requestReturn) => ({type: REQUEST_RETURN, requestReturn});\nconst endAction = (end) => ({type: END, end});\nexport const setStartCurrentPage = () => ({type: SET_START_CURRENT_PAGE});\n\nexport const getFirstPartOfPostThunk = pageNumber => dispatch => {\n    dispatch(requestReturnAction(false));\n    PostAPI.getPartOfPost(pageNumber).then(data => {\n        dispatch(requestReturnAction(true));\n        dispatch(getFirstPartOfPostAction(data));\n        dispatch(incrementAction());\n    });\n};\n\nexport const getNextPartOfPostThunk = pageNumber => (dispatch, getState) => {\n    if (!getState().postsStore.end) {\n        if (getState().postsStore.requestReturn) {\n            dispatch(requestReturnAction(false));\n            PostAPI.getPartOfPost(pageNumber).then(data => {\n                dispatch(requestReturnAction(true));\n                dispatch(incrementAction());\n                dispatch(getNextPartOfPostAction(data))\n            });\n        }\n    } else {\n        dispatch(endAction(false))\n    }\n};\n\nlet initialState = {\n    posts: [],\n    currentPage: 1,\n    requestReturn: true,\n    end: false\n};\n\nconst PostsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_FIRST_POSTS:\n            return {\n                ...state,\n                posts: action.firstPosts,\n            };\n        case GET_NEXT_POSTS:\n            return {\n                ...state,\n                posts: [...state.posts.map(item => ({...item})), ...action.nextPosts],\n                end: !action.nextPosts.length,\n            };\n        case SET_START_CURRENT_PAGE:\n            return {\n                ...state,\n                currentPage: 1\n            };\n        case INCREMENT:\n            return {\n                ...state,\n                currentPage: state.currentPage + 1\n            };\n        case REQUEST_RETURN:\n            return {...state, requestReturn: action.requestReturn};\n        case END:\n            return {...state, end: action.end};\n        default: {\n            return state;\n        }\n    }\n};\nexport default PostsReducer;","import React from 'react';\nimport Posts from \"./Posts\";\nimport {connect} from \"react-redux\";\nimport {getFirstPartOfPostThunk, getNextPartOfPostThunk, setStartCurrentPage} from \"../Redux/PostsReducer\";\nimport {getCurrentPage, getIsAuth, getLoading, getPosts} from \"../Redux/Selectors\";\n\nclass PostsContainer extends React.Component {\n    componentDidMount() {\n        this.props.getFirstPartOfPostThunk(this.props.currentPage);\n        window.addEventListener('scroll', this.scrollFunction);\n    }\n\n    componentWillUnmount() {\n        this.props.setStartCurrentPage();\n        window.removeEventListener('scroll', this.scrollFunction)\n    }\n\n    scrollFunction = () => {\n        if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight) {\n            this.props.getNextPartOfPostThunk(this.props.currentPage);\n        }\n    };\n\n    render() {\n        return <Posts {...this.props}/>\n    }\n}\n\nlet mapStateToProps = state => ({\n    currentPage: getCurrentPage(state),\n    posts: getPosts(state),\n    requestReturn: getLoading(state),\n    isAuth: getIsAuth(state),\n});\nexport default connect(mapStateToProps, {\n    getFirstPartOfPostThunk,\n    getNextPartOfPostThunk,\n    setStartCurrentPage\n})(PostsContainer);","import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport {connect} from \"react-redux\";\nimport css from './Login.module.css';\n\nclass LoginForm extends React.Component {\n    render() {\n        return (\n            <form className={css.Login} onSubmit={this.props.handleSubmit}>\n                <div>\n                    <div>\n                        <Field component={`input`}\n                               name={`Email`}\n                               placeholder={`Email`}\n                               className={css.input}/>\n                    </div>\n                    <div>\n                        <Field component={`input`}\n                               name={`Password`}\n                               placeholder={`Password`}\n                               type={\"password\"}\n                               className={css.input}/>\n                    </div>\n                    {this.props.error && <div className={css.formError}>{this.props.error}</div>}\n                    <div>\n                        <button className={css.button}>Log in</button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default reduxForm({form: 'login'})(connect(null, {})(LoginForm));","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {isAuthAction, logInThunk, logOutThunk} from \"../Redux/AuthReducer\";\nimport {getIsAuth} from \"../Redux/Selectors\";\nimport {Redirect} from \"react-router-dom\";\nimport LoginReducerForm from \"./LoginForm\";\n\nclass LoginContainer extends React.Component {\n    render() {\n        let onSubmit = formData => {\n            console.log(formData);\n            this.props.logInThunk(formData.Email, formData.Password);\n        };\n        return (\n            <div>\n                {this.props.isAuth\n                    ? <Redirect to={`/profile`}/>\n                    : <LoginReducerForm onSubmit={onSubmit}/>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({isAuth: getIsAuth(state)});\nexport default connect(mapStateToProps, {logInThunk, isAuthAction, logOutThunk})(LoginContainer);","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Home/Home\";\nimport Header from \"./components/Header/Header\";\nimport {Route} from \"react-router-dom\";\nimport Profile from \"./components/Profile/Profile\";\nimport PostsContainer from \"./components/Posts/PostsContainer\";\nimport {connect} from \"react-redux\";\nimport LoginContainer from \"./components/Login/LoginContainer\";\nimport {authorizationCheckThunk} from \"./components/Redux/AuthReducer\";\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.authorizationCheckThunk();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <div>\n                    <Route exact path={`/`} render={() => <Home/>}/>\n                    <Route path={`/posts`} render={() => <PostsContainer/>}/>\n                    <Route path={`/profile`} render={() => <Profile/>}/>\n                    <Route path={`/login`} render={() => <LoginContainer/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default connect(null, {authorizationCheckThunk})(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport AuthReducer from \"./components/Redux/AuthReducer\";\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport PostsReducer from \"./components/Redux/PostsReducer\";\nimport thunkMiddleware from 'redux-thunk';\nimport {reducer as formReducer} from \"redux-form\";\n\nconst CombineReducer = combineReducers({\n    authStore: AuthReducer,\n    postsStore: PostsReducer,\n    form: formReducer,\n});\nconst store = createStore(CombineReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__1ujut\",\"formError\":\"Login_formError__9ZYrJ\",\"input\":\"Login_input__1zhXD\",\"button\":\"Login_button__3J267\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"pagesList\":\"Header_pagesList__2AVl2\",\"pageLink\":\"Header_pageLink__1MSBc\",\"logOut\":\"Header_logOut__31saU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Posts_Posts__X3kDO\",\"Post\":\"Posts_Post__5ftHq\",\"postTitle\":\"Posts_postTitle__YESV2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"somePage\":\"Home_somePage__1XfpV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PreloaderContainer\":\"Preloader_PreloaderContainer__15e2F\",\"Preloader\":\"Preloader_Preloader__3HMRl\"};"],"sourceRoot":""}